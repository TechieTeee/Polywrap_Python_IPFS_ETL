"""
This type stub file was generated by pyright.
"""

import os
import sys
from io import IOBase
from typing import Any, Callable, Dict, Optional

from .exceptions import *
from .ext import ExtType, Timestamp
from .fallback import Packer, Unpacker

version = ...
__version__ = ...
if os.environ.get("MSGPACK_PUREPYTHON") or sys.version_info[0] == 2: ...
else: ...

def pack(o: Any, stream: IOBase, **kwargs: Dict[Any, Any]) -> IOBase:  # -> None:
    """
    Pack object `o` and write it to `stream`

    See :class:`Packer` for options.
    """
    ...

def packb(o: Any, default: Optional[Callable[[Any], ExtType]], use_bin_type: bool, **kwargs: Dict[Any, Any]) -> bytes:  # -> None:
    """
    Pack object `o` and return packed bytes

    See :class:`Packer` for options.
    """
    ...

def unpack(stream: IOBase,**kwargs: Dict[Any, Any]) -> Any:
    """
    Unpack an object from `stream`.

    Raises `ExtraData` when `stream` contains extra bytes.
    See :class:`Unpacker` for options.
    """
    ...

def unpackb(
    packed: bytes,
    ext_hook: Optional[Callable[[int, bytes], bytes]] = ...,
    **kwargs: Dict[Any, Any],
) -> Any:
    """
    Unpack an object from `packed`.

    Raises ``ExtraData`` when *packed* contains extra bytes.
    Raises ``ValueError`` when *packed* is incomplete.
    Raises ``FormatError`` when *packed* is not valid msgpack.
    Raises ``StackError`` when *packed* contains too nested.
    Other exceptions can be raised during unpacking.

    See :class:`Unpacker` for options.
    """
    ...

load = ...
loads = ...
dump = ...
dumps = ...
