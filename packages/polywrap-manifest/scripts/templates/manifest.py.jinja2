# This file was automatically generated by scripts/templates/__init__.py.jinja2.
# DO NOT MODIFY IT BY HAND. Instead, modify scripts/templates/__init__.py.jinja2,
# and run python ./scripts/generate.py to regenerate this file.
"""This module contains the latest version of the wrap manifest and abi."""

from dataclasses import dataclass
from enum import Enum
{%- if versions.__len__() != 1 %}
from typing import Union
{%- endif %}

{% for version in versions -%}
from .wrap_{{ version.manifest_module_version }} import WrapManifest as WrapManifest_{{ version.manifest_module_version }}
from .wrap_{{ version.manifest_module_version }} import Abi as WrapAbi_{{ version.manifest_module_version }}_{{ version.abi_module_version }}
{%- endfor %}
from .wrap_{{ latest.manifest_module_version }} import *


@dataclass(slots=True, kw_only=True)
class DeserializeManifestOptions:
    """Options for deserializing a manifest from msgpack encoded bytes.

    Attributes:
        no_validate: If true, do not validate the manifest.
    """
    no_validate: Optional[bool] = None


@dataclass(slots=True, kw_only=True)
class SerializeManifestOptions:
    """Options for serializing a manifest to msgpack encoded bytes.

    Attributes:
        no_validate: If true, do not validate the manifest.
    """
    no_validate: Optional[bool] = None


class WrapManifestVersions(Enum):
    """The versions of the Wrap manifest."""
    VERSION_0_1 = "0.1", "0.1.0"
    {%- for version in versions %}
    {%- if version.manifest_version != "0.1" %}
    VERSION_{{ version.manifest_module_version }} = "{{ version.manifest_version }}"
    {%- endif %}
    {%- endfor %}

    def __new__(cls, value: int, *aliases: str) -> "WrapManifestVersions":
        """Override the default __new__ method to allow aliases for enum values."""
        obj = object.__new__(cls)
        obj._value_ = value
        for alias in aliases:
            cls._value2member_map_[alias] = obj
        return obj


class WrapManifestAbiVersions(Enum):
    """The versions of the abi for the given version of wrap manifest."""
    {% for version in versions -%}
    VERSION_{{ version.manifest_module_version }} = "{{ version.abi_version }}"
    {%- endfor %}


class WrapAbiVersions(Enum):
    """The versions of the Wrap abi."""
    {% for version in abi_versions -%}
    VERSION_{{ version.abi_module_version }} = "{{ version.abi_version }}"
    {%- endfor %}


AnyWrapManifest = {% if versions.__len__() == 1 -%}
WrapManifest_{{ versions[0].manifest_module_version }}
{% else -%}
Union[
{%- for version in versions -%}
    WrapManifest_{{ version.manifest_module_version }},
{%- endfor -%}
]
{%- endif -%}
AnyWrapAbi = {% if versions.__len__() == 1 -%}
WrapAbi_{{versions[0].manifest_module_version}}_{{ versions[0].abi_module_version }}
{% else -%}
Union[
{%- for version in versions -%}
    WrapAbi_{{version.manifest_module_version}}_{{ version.abi_module_version }},
{%- endfor -%}
]
{% endif %}

WrapManifest = WrapManifest_{{ latest.manifest_module_version }}
WrapAbi = WrapAbi_{{ latest.manifest_module_version }}_{{ latest.abi_module_version }}

LATEST_WRAP_MANIFEST_VERSION = "{{ latest.manifest_version }}"
LATEST_WRAP_ABI_VERSION = "{{ latest.abi_version }}"
