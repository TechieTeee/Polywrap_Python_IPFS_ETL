"""
This type stub file was generated by pyright.
"""

from typing import Generic, TypeVar, List, Dict, Any

class unsync_meta(type):
    @property
    def loop(cls): # -> AbstractEventLoop:
        ...
    
    @property
    def thread(cls): # -> Thread:
        ...
    
    @property
    def process_executor(cls):
        ...
    


class unsync(metaclass=unsync_meta):
    thread_executor = ...
    process_executor = ...
    unsync_functions = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    @property
    def cpu_bound(self): # -> Literal[False]:
        ...
    
    def __call__(self, *args: Any, **kwargs: Any): # -> Self@unsync | Unfuture[Unknown]:
        ...
    
    def __get__(self, instance, owner): # -> (*args: Unknown, **kwargs: Unknown) -> (unsync | Unfuture[Unknown]):
        ...
    


T = TypeVar('T')
class Unfuture(Generic[T]):
    @staticmethod
    def from_value(value): # -> Unfuture[Unknown]:
        ...
    
    def __init__(self, future=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, None, Unknown] | Generator[Any, None, Any]:
        ...
    
    __await__ = ...
    def result(self, *args: Any, **kwargs: Any) -> T:
        ...
    
    def done(self): # -> bool:
        ...
    
    def set_result(self, value): # -> Handle:
        ...
    
    @unsync
    async def then(self, continuation):
        ...
    


